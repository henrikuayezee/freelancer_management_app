// Prisma Schema for Freelancer Management Platform
// This defines the database structure for the entire application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

// Users table - handles authentication for all user types
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // bcrypt hashed
  role      String   @default("FREELANCER") // ADMIN, PROJECT_MANAGER, TRAINING_LEAD, QA, FINANCE, FREELANCER
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  freelancer Freelancer? // One-to-one if user is a freelancer
  adminProfile AdminProfile? // One-to-one if user is admin/staff
  notifications Notification[] // One-to-many notifications

  @@index([email])
  @@index([role])
}

// UserRole values: ADMIN, PROJECT_MANAGER, TRAINING_LEAD, QA, FINANCE, FREELANCER

// Admin/Staff profile (for non-freelancer users)
model AdminProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phone       String?
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ============================================
// FREELANCER MANAGEMENT
// ============================================

// Freelancer Applications (before approval)
model FreelancerApplication {
  id            String      @id @default(uuid())

  // Core fields (required for operations)
  email         String      @unique
  firstName     String
  lastName      String
  phone         String

  // Dynamic form data - stores all form responses as JSON
  formData      String?     // JSON object containing all form field responses

  // Legacy fields (kept for backward compatibility, can be deprecated later)
  age           Int?
  city          String?
  country       String?
  gender        String?
  timezone      String?
  educationLevel      String?
  degreeName          String?
  educationInstitution String?
  hasLaptop           Boolean  @default(false)
  hasReliableInternet Boolean  @default(false)
  remoteWorkAvailable Boolean  @default(false)
  employmentStatus    String?
  preferredStartTime  String?
  preferredEndTime    String?
  availabilityType    String?
  hoursPerWeek        Int?
  interestedLongTerm  Boolean  @default(false)
  relevantExperience  String?
  yearsOfExperience   Float?
  previousCompanies   String?
  annotationTypes     String?
  annotationMethods   String?
  annotationTools     String?
  strongestTool       String?
  languageProficiency String?
  hasTrainedOthers    Boolean  @default(false)
  complexTaskDescription String?
  howHeardAbout       String?

  // Application Status
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy    String?  // User ID of reviewer
  reviewedAt    DateTime?
  rejectionReason String?

  // Timestamps
  submittedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  freelancer    Freelancer?  // Created after approval

  @@index([status])
  @@index([email])
  @@index([country])
  @@index([submittedAt])
}



// Freelancer Profile (after approval)
model Freelancer {
  id                    String   @id @default(uuid())
  freelancerId          String   @unique  // Human-readable ID (e.g., "FL-0001")

  // Link to User account
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Link to original application
  applicationId         String   @unique
  application           FreelancerApplication @relation(fields: [applicationId], references: [id])

  // Personal Information (copied from application, can be updated)
  firstName             String
  lastName              String
  email                 String   @unique
  phone                 String
  city                  String
  country               String
  timezone              String?
  gender                String?
  age                   Int?

  // Skills (JSON fields for flexibility)
  domainExpertise       String?  // JSON array
  annotationTypes       String?  // JSON array
  annotationMethods     String?  // JSON array
  toolsProficiency      String?  // JSON object: {"CVAT": "expert", "V7": "intermediate"}
  languageProficiency   String?  // JSON array

  // Availability (self-managed)
  availabilityType      String?  // "Full-time", "Part-time"
  hoursPerWeek          Int?
  preferredStartTime    String?
  preferredEndTime      String?
  unavailableDates      String?  // JSON array of date strings

  // Status & Classification (admin-managed)
  status                String @default("ACTIVE")
  onboardingStatus      String @default("PENDING")
  currentTier           String @default("BRONZE")
  currentGrade          String @default("C")

  // Performance Tags (admin-managed, JSON array)
  performanceTags       String?  // ["high-performer", "reliable", "fast-learner"]

  // Training
  trainingCompleted     Boolean  @default(false)
  trainingCompletedAt   DateTime?

  // Slack
  slackUserId           String?
  slackInvitedAt        DateTime?

  // Timestamps
  approvedAt            DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastActiveAt          DateTime?

  // Relations
  onboardingTests       OnboardingTest[]
  projectApplications   ProjectApplication[]
  projectAssignments    ProjectAssignment[]
  performanceRecords    PerformanceRecord[]
  paymentRecords        PaymentRecord[]
  interventions         PerformanceIntervention[]

  @@index([freelancerId])
  @@index([status])
  @@index([currentTier])
  @@index([currentGrade])
  @@index([country])
  @@index([onboardingStatus])
}









// ============================================
// ONBOARDING & TRAINING
// ============================================

// Onboarding Tests (Bounding Box & Segmentation)
model OnboardingTest {
  id                String   @id @default(uuid())
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  testType          String
  attemptNumber     Int      // 1, 2, or 3

  // Test Details
  taskId            String?  // ID from annotation platform (e.g., CVAT task ID)
  assignedAt        DateTime @default(now())
  submittedAt       DateTime?

  // Grading
  reviewedBy        String?  // User ID of reviewer
  reviewedAt        DateTime?
  confidenceScore   Float?   // 0-100
  grade             String?  // Pass/Fail or letter grade
  comments          String?
  passed            Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([freelancerId])
  @@index([testType])
}



// ============================================
// PROJECT MANAGEMENT
// ============================================

model Project {
  id                    String   @id @default(uuid())
  projectId             String   @unique  // Human-readable (e.g., "AN001")

  // Project Details
  name                  String
  vertical              String?  // e.g., "Computer Vision"
  annotationRequired    String?  // e.g., "Keypoint", "Bounding Box"
  description           String?

  // Requirements
  freelancersRequired   Int
  startDate             DateTime
  endDate               DateTime?

  // Performance Expectations
  speedPercentage       Float?   // Expected speed %
  accuracyPercentage    Float    @default(90.0)
  assetsPerDay          Int?
  hoursPerDay           Float?

  // Evaluation
  evaluationFrequency   String @default("WEEKLY")

  // Payment Model
  paymentModel          String   // HOURLY, PER_ASSET, PER_OBJECT

  // Hourly Payment (separate rates for annotation and review)
  hourlyRateAnnotation  Float?
  hourlyRateReview      Float?

  // Per Asset Payment (separate rates for annotation and review)
  perAssetRateAnnotation Float?
  perAssetRateReview     Float?
  expectedTimePerAsset   Float?  // In minutes

  // Per Object Payment (separate rates for annotation and review)
  perObjectRateAnnotation Float?
  perObjectRateReview     Float?

  // Status
  status                String @default("DRAFT")
  openForApplications   Boolean @default(false)

  // Tracking
  createdBy             String   // User ID
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  applications          ProjectApplication[]
  assignments           ProjectAssignment[]
  performanceRecords    PerformanceRecord[]
  paymentLineItems      PaymentLineItem[]

  @@index([projectId])
  @@index([status])
  @@index([startDate])
}







// Freelancer applications to projects
model ProjectApplication {
  id                String   @id @default(uuid())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  // Application Details
  availableHours    Int      // Hours they can commit
  appliedAt         DateTime @default(now())

  // Fitment Test
  fitmentTestId     String?
  fitmentTestScore  Float?
  fitmentTestPassed Boolean  @default(false)

  // Status
  status            String @default("APPLIED")
  reviewedBy        String?
  reviewedAt        DateTime?

  updatedAt         DateTime @updatedAt

  @@unique([projectId, freelancerId])
  @@index([projectId])
  @@index([freelancerId])
  @@index([status])
}



// Project Assignments (after approval)
model ProjectAssignment {
  id                String   @id @default(uuid())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  // Assignment Details
  assignedAt        DateTime @default(now())
  startDate         DateTime
  endDate           DateTime?

  // Expectations (can override project defaults)
  expectedAssetsPerDay  Int?
  expectedHoursPerDay   Float?

  // Status
  status            String @default("ACTIVE")

  // Completion
  completedAt       DateTime?
  completionNotes   String?

  updatedAt         DateTime @updatedAt

  @@unique([projectId, freelancerId])
  @@index([projectId])
  @@index([freelancerId])
  @@index([status])
}



// ============================================
// PERFORMANCE TRACKING
// ============================================

model PerformanceRecord {
  id                String   @id @default(uuid())
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  projectId         String?
  project           Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Period
  recordDate        DateTime @default(now())
  recordType        String  // DAILY, WEEKLY, MONTHLY
  month             Int?
  year              Int?

  // Productivity Metrics
  hoursWorked       Float?
  assetsCompleted   Int?
  tasksCompleted    Int?
  avgTimePerTask    Float?   // Time per task (TPT) in minutes

  // COM Scores (Soft Skills) - Scale: 0-3 or 0-5
  comResponsibility    Float?
  comCommitment        Float?
  comInitiative        Float?
  comWillingness       Float?
  comCommunication     Float?
  comTotal             Float?

  // QUAL Scores (Quality Metrics)
  qualSpeed            Float?
  qualDelibOmission    Float?
  qualAccuracy         Float?
  qualAttention        Float?
  qualUnannotated      Float?
  qualUnderstanding    Float?
  qualRejectedCount    Int?
  qualTotal            Float?

  // Overall
  overallScore      Float?

  // Who recorded this
  recordedBy        String?  // User ID
  recordedAt        DateTime @default(now())

  // Notes
  notes             String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([freelancerId])
  @@index([projectId])
  @@index([recordType])
  @@index([recordDate])
  @@index([year, month])
}



// Performance Interventions (3 strikes system)
model PerformanceIntervention {
  id                String   @id @default(uuid())
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  interventionNumber  Int    // 1, 2, or 3
  reason            String   // Why intervention was needed
  actionTaken       String   // What was discussed/done

  conductedBy       String   // User ID
  conductedAt       DateTime @default(now())

  // Follow-up
  followUpDate      DateTime?
  followUpNotes     String?
  resolved          Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([freelancerId])
  @@index([interventionNumber])
}

// ============================================
// PAYMENT MANAGEMENT
// ============================================

model PaymentRecord {
  id                String   @id @default(uuid())
  freelancerId      String
  freelancer        Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  // Period
  month             Int
  year              Int
  periodStart       DateTime
  periodEnd         DateTime

  // Calculation Details
  hoursWorked       Float?
  assetsCompleted   Int?
  objectsAnnotated  Int?

  // Payment Breakdown
  hourlyRate        Float?
  assetRate         Float?
  objectRate        Float?

  // Total
  totalAmount       Float
  currency          String   @default("GHC")

  // Status
  status            String @default("PENDING") // PENDING, APPROVED, PAID, REJECTED
  approvedBy        String?
  approvedAt        DateTime?
  paidAt            DateTime?

  // Payment Details
  paymentMethod     String?  // BANK_TRANSFER, MOBILE_MONEY, PAYPAL
  referenceNumber   String?

  // Notes
  notes             String?
  internalNotes     String?

  // Tracking
  createdBy         String   // User ID
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  lineItems         PaymentLineItem[]

  @@unique([freelancerId, year, month])
  @@index([freelancerId])
  @@index([year, month])
  @@index([status])
}

// Individual payment line items (per project/task)
model PaymentLineItem {
  id                String   @id @default(uuid())
  paymentRecordId   String
  paymentRecord     PaymentRecord @relation(fields: [paymentRecordId], references: [id], onDelete: Cascade)

  projectId         String?
  project           Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Description
  description       String
  workDate          DateTime

  // Work Details
  hoursWorked       Float?
  assetsCompleted   Int?
  objectsAnnotated  Int?

  // Rate Applied
  rate              Float
  rateType          String   // HOURLY, PER_ASSET, PER_OBJECT

  // Calculated Amount
  amount            Float

  // Tracking
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([paymentRecordId])
  @@index([projectId])
  @@index([workDate])
}



// ============================================
// COMMUNICATION
// ============================================

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification Details
  type        String   // APPLICATION_APPROVED, PROJECT_ASSIGNED, PERFORMANCE_UPDATE, etc.
  title       String
  message     String
  link        String?  // Optional link to related resource

  // Metadata
  relatedId   String?  // ID of related entity (projectId, applicationId, etc.)
  relatedType String?  // Type of related entity (PROJECT, APPLICATION, etc.)

  // Status
  isRead      Boolean  @default(false)
  readAt      DateTime?

  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}



model Announcement {
  id          String   @id @default(uuid())

  title       String
  message     String

  // Targeting
  targetRole  String?  // JSON array of roles
  targetTier  String?  // JSON array of tiers
  targetGrade String?  // JSON array of grades
  targetCountry String? // JSON array of countries

  // Scheduling
  publishAt   DateTime @default(now())
  expiresAt   DateTime?

  // Status
  isPublished Boolean  @default(false)

  // Tracking
  createdBy   String   // User ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isPublished])
  @@index([publishAt])
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String   // JSON value
  description String?
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([key])
}